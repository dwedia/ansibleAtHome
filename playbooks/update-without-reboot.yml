- name: Update Playbook, that does not reboot servers
  hosts: all
  become: true

  vars_files:
    - /home/ansibleadmin/ansibleAtHome/playbooks/vault/vaultfile.yml

  vars:
    ansible_become_pass: "{{ sudo_password }}"

  tasks:

#### Apt ####
    - name: "[DEBIAN] Updating cache, installing upgrades, running auotclean and autoremove afterwards"
      apt:
        update_cache: 'yes'
        upgrade: 'yes'
        autoclean: 'yes'
        autoremove: 'yes'
      register: aptout
      when: ansible_facts['os_family'] == "Debian"

    - name: Output APT
      debug: msg="{{ aptout.stdout_lines }}"
      when: aptout.stdout_lines is defined

#### DNF ####
    - name: "[REDHAT] Check packages to upgrade"
      dnf:
        list: updates
      register: packages
      when: ansible_facts['os_family'] == "RedHat"

    - name: Show packages to upgrade
      debug:
        msg: >-
          {%- set output=[] -%}
          {%- for p in packages.results -%}
          {{ output.append('%-40s' % (p.name ~ '-' ~ p.version) ~ ' | repo: ' ~ p.repo) }}
          {%- endfor -%}
          {{ output }}
      when: ansible_facts['os_family'] == "RedHat"

    - name: Upgrade all packages
      ansible.builtin.dnf:
        name: "*"
        state: latest
        update_only: true
      when: ansible_facts['os_family'] == "RedHat"

    - name: Autoremove unneeded packages installed as dependencies
      ansible.builtin.dnf:
        autoremove: yes
      when: ansible_facts['os_family'] == "RedHat"

#### ClamAV ####
    - name: Check for ClamAV
      stat:
        path: "/usr/bin/clamscan"
      register: cl_service_status

    - name: Update clamav
      command: /usr/bin/freshclam --verbose
      register: clamout
      when: cl_service_status.stat.exists

    - name: Output from CLAMAV-command
      debug: msg="{{ clamout.stdout_lines }}"
      when: clamout.stdout_lines is defined

#### Snap ####
    - name: Check for snap
      stat:
        path: "/usr/bin/snap"
      register: sd_service_status

    - name: Update snap packages
      command: /usr/bin/snap refresh
      register: snapout
      when: sd_service_status.stat.exists

    - name: Output from snap-command
      ansible.builtin.debug:
        #msg: "{{ snapout.stdout_lines | replace('\u001b[0m\u001b[?25h\u001b[K', 'All snaps up to date.') }}"
        msg: "{{ snapout.stdout_lines }}"
      when: snapout.stdout_lines is defined

#### Flatpak ####
    - name: Check for flatpak
      stat:
        path: "/usr/bin/flatpak"
      register: fp_service_status

    - name: Update flatpak packages
      command: /usr/bin/flatpak update -y
      register: flatout
      when: fp_service_status.stat.exists

    - name: Output from flatpak-command
      debug: msg="{{ flatout.stdout_lines }}"
      when: flatout.stdout_lines is defined

#### [DEBIAN] Check if reboot is needed ####
    - name: "[DEBIAN] Check if reboot is needed"
      stat:
        path: /var/run/reboot-required
      register: rebootRequired
      when: ansible_facts['os_family'] == "Debian"

    - name: "[DEBIAN] Reboot Required?"
      debug:
        msg: "Reboot is Required on {{ ansible_hostname }}"
      when: (rebootRequired.exists) and (ansible_facts['os_family'] == "Debian")

#### [REDHAT] Check if reboot is needed ####
    - name: "[REDHAT] Check if needs-restarting is installed"
      stat:
        path: /usr/bin/needs-restarting
      register: needsRestartingInstalled
      when: ansible_facts['os_family'] == "RedHat"

    - name: "[REDHAT] run needs-restarting"
      shell: needs-restarting
      register: needsRestartingStatus
      when: needsRestartingInstalled.exists

    - name: "[RedHat] Reboot Required?"
      debug:
        msg: "Reboot is Required on {{ ansible_hostname }}"
      when: needsRestartingStatus.rc == 1
